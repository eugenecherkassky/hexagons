{
  "contractName": "ContextUpgradeable",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n",
  "sourcePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
  "ast": {
    "absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
    "exportedSymbols": {
      "AddressUpgradeable": [
        11249
      ],
      "ContextUpgradeable": [
        11291
      ],
      "Initializable": [
        8088
      ]
    },
    "id": 11292,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 11251,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "86:23:55"
      },
      {
        "absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
        "file": "../proxy/utils/Initializable.sol",
        "id": 11252,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 11292,
        "sourceUnit": 8089,
        "src": "110:42:55",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 11254,
              "name": "Initializable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 8088,
              "src": "691:13:55"
            },
            "id": 11255,
            "nodeType": "InheritanceSpecifier",
            "src": "691:13:55"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 11253,
          "nodeType": "StructuredDocumentation",
          "src": "154:496:55",
          "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
        },
        "fullyImplemented": true,
        "id": 11291,
        "linearizedBaseContracts": [
          11291,
          8088
        ],
        "name": "ContextUpgradeable",
        "nameLocation": "669:18:55",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 11260,
              "nodeType": "Block",
              "src": "763:7:55",
              "statements": []
            },
            "id": 11261,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 11258,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 11257,
                  "name": "onlyInitializing",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8031,
                  "src": "746:16:55"
                },
                "nodeType": "ModifierInvocation",
                "src": "746:16:55"
              }
            ],
            "name": "__Context_init",
            "nameLocation": "720:14:55",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11256,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "734:2:55"
            },
            "returnParameters": {
              "id": 11259,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "763:0:55"
            },
            "scope": 11291,
            "src": "711:59:55",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 11266,
              "nodeType": "Block",
              "src": "838:7:55",
              "statements": []
            },
            "id": 11267,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 11264,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 11263,
                  "name": "onlyInitializing",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8031,
                  "src": "821:16:55"
                },
                "nodeType": "ModifierInvocation",
                "src": "821:16:55"
              }
            ],
            "name": "__Context_init_unchained",
            "nameLocation": "785:24:55",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11262,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "809:2:55"
            },
            "returnParameters": {
              "id": 11265,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "838:0:55"
            },
            "scope": 11291,
            "src": "776:69:55",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 11275,
              "nodeType": "Block",
              "src": "912:34:55",
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 11272,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4294967281,
                      "src": "929:3:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 11273,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "929:10:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 11271,
                  "id": 11274,
                  "nodeType": "Return",
                  "src": "922:17:55"
                }
              ]
            },
            "id": 11276,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_msgSender",
            "nameLocation": "859:10:55",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11268,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "869:2:55"
            },
            "returnParameters": {
              "id": 11271,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11270,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 11276,
                  "src": "903:7:55",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11269,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "903:7:55",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "902:9:55"
            },
            "scope": 11291,
            "src": "850:96:55",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 11284,
              "nodeType": "Block",
              "src": "1019:32:55",
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 11281,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4294967281,
                      "src": "1036:3:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 11282,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "src": "1036:8:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "functionReturnParameters": 11280,
                  "id": 11283,
                  "nodeType": "Return",
                  "src": "1029:15:55"
                }
              ]
            },
            "id": 11285,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_msgData",
            "nameLocation": "961:8:55",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11277,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "969:2:55"
            },
            "returnParameters": {
              "id": 11280,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11279,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 11285,
                  "src": "1003:14:55",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 11278,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1003:5:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1002:16:55"
            },
            "scope": 11291,
            "src": "952:99:55",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "constant": false,
            "documentation": {
              "id": 11286,
              "nodeType": "StructuredDocumentation",
              "src": "1057:254:55",
              "text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
            },
            "id": 11290,
            "mutability": "mutable",
            "name": "__gap",
            "nameLocation": "1336:5:55",
            "nodeType": "VariableDeclaration",
            "scope": 11291,
            "src": "1316:25:55",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 11287,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1316:7:55",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 11289,
              "length": {
                "hexValue": "3530",
                "id": 11288,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1324:2:55",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_50_by_1",
                  "typeString": "int_const 50"
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "1316:11:55",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "visibility": "private"
          }
        ],
        "scope": 11292,
        "src": "651:693:55",
        "usedErrors": []
      }
    ],
    "src": "86:1259:55"
  },
  "legacyAST": {
    "absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
    "exportedSymbols": {
      "AddressUpgradeable": [
        11249
      ],
      "ContextUpgradeable": [
        11291
      ],
      "Initializable": [
        8088
      ]
    },
    "id": 11292,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 11251,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "86:23:55"
      },
      {
        "absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
        "file": "../proxy/utils/Initializable.sol",
        "id": 11252,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 11292,
        "sourceUnit": 8089,
        "src": "110:42:55",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 11254,
              "name": "Initializable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 8088,
              "src": "691:13:55"
            },
            "id": 11255,
            "nodeType": "InheritanceSpecifier",
            "src": "691:13:55"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 11253,
          "nodeType": "StructuredDocumentation",
          "src": "154:496:55",
          "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
        },
        "fullyImplemented": true,
        "id": 11291,
        "linearizedBaseContracts": [
          11291,
          8088
        ],
        "name": "ContextUpgradeable",
        "nameLocation": "669:18:55",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 11260,
              "nodeType": "Block",
              "src": "763:7:55",
              "statements": []
            },
            "id": 11261,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 11258,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 11257,
                  "name": "onlyInitializing",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8031,
                  "src": "746:16:55"
                },
                "nodeType": "ModifierInvocation",
                "src": "746:16:55"
              }
            ],
            "name": "__Context_init",
            "nameLocation": "720:14:55",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11256,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "734:2:55"
            },
            "returnParameters": {
              "id": 11259,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "763:0:55"
            },
            "scope": 11291,
            "src": "711:59:55",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 11266,
              "nodeType": "Block",
              "src": "838:7:55",
              "statements": []
            },
            "id": 11267,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 11264,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 11263,
                  "name": "onlyInitializing",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8031,
                  "src": "821:16:55"
                },
                "nodeType": "ModifierInvocation",
                "src": "821:16:55"
              }
            ],
            "name": "__Context_init_unchained",
            "nameLocation": "785:24:55",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11262,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "809:2:55"
            },
            "returnParameters": {
              "id": 11265,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "838:0:55"
            },
            "scope": 11291,
            "src": "776:69:55",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 11275,
              "nodeType": "Block",
              "src": "912:34:55",
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 11272,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4294967281,
                      "src": "929:3:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 11273,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "929:10:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 11271,
                  "id": 11274,
                  "nodeType": "Return",
                  "src": "922:17:55"
                }
              ]
            },
            "id": 11276,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_msgSender",
            "nameLocation": "859:10:55",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11268,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "869:2:55"
            },
            "returnParameters": {
              "id": 11271,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11270,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 11276,
                  "src": "903:7:55",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 11269,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "903:7:55",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "902:9:55"
            },
            "scope": 11291,
            "src": "850:96:55",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 11284,
              "nodeType": "Block",
              "src": "1019:32:55",
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 11281,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4294967281,
                      "src": "1036:3:55",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 11282,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "src": "1036:8:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "functionReturnParameters": 11280,
                  "id": 11283,
                  "nodeType": "Return",
                  "src": "1029:15:55"
                }
              ]
            },
            "id": 11285,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_msgData",
            "nameLocation": "961:8:55",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11277,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "969:2:55"
            },
            "returnParameters": {
              "id": 11280,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11279,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 11285,
                  "src": "1003:14:55",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 11278,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1003:5:55",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1002:16:55"
            },
            "scope": 11291,
            "src": "952:99:55",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "constant": false,
            "documentation": {
              "id": 11286,
              "nodeType": "StructuredDocumentation",
              "src": "1057:254:55",
              "text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
            },
            "id": 11290,
            "mutability": "mutable",
            "name": "__gap",
            "nameLocation": "1336:5:55",
            "nodeType": "VariableDeclaration",
            "scope": 11291,
            "src": "1316:25:55",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 11287,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1316:7:55",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 11289,
              "length": {
                "hexValue": "3530",
                "id": 11288,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1324:2:55",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_50_by_1",
                  "typeString": "int_const 50"
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "1316:11:55",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "visibility": "private"
          }
        ],
        "scope": 11292,
        "src": "651:693:55",
        "usedErrors": []
      }
    ],
    "src": "86:1259:55"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.7+commit.e28d00a7.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.3",
  "updatedAt": "2022-07-11T22:06:52.879Z",
  "devdoc": {
    "details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}